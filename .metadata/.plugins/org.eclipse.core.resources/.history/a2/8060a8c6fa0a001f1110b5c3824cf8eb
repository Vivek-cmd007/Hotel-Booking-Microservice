import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.hotelroom.entity.Hotel;
import com.hotelroom.exception.ResourceNotFoundException;
import com.hotelroom.repository.HotelRepository;
import com.hotelroom.service.HotelService;
import com.hotelroom.service.HotelServiceImpl;

public class HotelServiceTest {

    @InjectMocks
    private HotelService hotelService = new HotelServiceImpl();

    @Mock
    private HotelRepository hotelRepository;

 

    @Test
    public void getAllHotelTest() {
        // Given
        List<Hotel> hotels = new ArrayList<>();
        hotels.add(new Hotel(1, "New York", "Hotel California", "Some address", "Nice place", 200.0,
                "contact@hotelcal.com", "1234567890", "0987654321", "www.hotelcal.com", new ArrayList<>()));

        when(hotelRepository.findAll()).thenReturn(hotels);

        // When
        List<Hotel> result = hotelService.getAllHotel();

        // Then
        assertEquals(1, result.size());
        assertEquals("New York", result.get(0).getCity());
    }

    @Test
    public void getHotelByIdTest() {
        // Given
        Hotel hotel = new Hotel(1, "New York", "Hotel California", "Some address", "Nice place", 200.0,
                "contact@hotelcal.com", "1234567890", "0987654321", "www.hotelcal.com", new ArrayList<>());

        when(hotelRepository.findById(1)).thenReturn(Optional.of(hotel));

        // When
        Hotel result = hotelService.getHotelById(1);

        // Then
        assertEquals("Hotel California", result.getHotelName());
        assertEquals("New York", result.getCity());
    }

    @Test
    public void getHotelByIdNotFoundTest() {
        // Given
        when(hotelRepository.findById(1)).thenReturn(Optional.empty());

        // Then
        assertThrows(ResourceNotFoundException.class, () -> {
            hotelService.getHotelById(1);
        });
    }

    @Test
    public void createHotelTest() {
        // Given
        Hotel hotel = new Hotel(1, "New York", "Hotel California", "Some address", "Nice place", 200.0,
                "contact@hotelcal.com", "1234567890", "0987654321", "www.hotelcal.com", new ArrayList<>());

        when(hotelRepository.save(any(Hotel.class))).thenReturn(hotel);

        // When
        Hotel result = hotelService.createHotel(hotel);

        // Then
        assertEquals("Hotel California", result.getHotelName());
        verify(hotelRepository).save(hotel);
    }

    @Test
    public void updateHotelTest() {
        // Given
        Hotel existingHotel = new Hotel(1, "New York", "Hotel California", "Some address", "Nice place", 200.0,
                "contact@hotelcal.com", "1234567890", "0987654321", "www.hotelcal.com", new ArrayList<>());

        when(hotelRepository.findById(1)).thenReturn(Optional.of(existingHotel));
        when(hotelRepository.save(any(Hotel.class))).thenReturn(existingHotel);

        // When
        Hotel result = hotelService.updateHotel(existingHotel);

        // Then
        assertEquals("Hotel California", result.getHotelName());
        verify(hotelRepository).save(existingHotel);
    }

    @Test
    public void updateHotelNotFoundTest() {
        // Given
        Hotel newHotel = new Hotel(1, "New York", "Hotel California", "Some address", "Nice place", 200.0,
                "contact@hotelcal.com", "1234567890", "0987654321", "www.hotelcal.com", new ArrayList<>());

        when(hotelRepository.findById(1)).thenReturn(Optional.empty());

        // Then
        assertThrows(ResourceNotFoundException.class, () -> {
            hotelService.updateHotel(newHotel);
        });
    }

    @Test
    public void deleteHotelTest() {
        // Given
        Hotel hotel = new Hotel(1, "New York", "Hotel California", "Some address", "Nice place", 200.0,
                "contact@hotelcal.com", "1234567890", "0987654321", "www.hotelcal.com", new ArrayList<>());

        when(hotelRepository.findById(1)).thenReturn(Optional.of(hotel));

        // When
        hotelService.deleteHotel(1);

        // Then
        verify(hotelRepository).delete(hotel);
    }

    @Test
    public void deleteHotelNotFoundTest() {
        // Given
        when(hotelRepository.findById(1)).thenReturn(Optional.empty());

        // Then
        assertThrows(ResourceNotFoundException.class, () -> {
            hotelService.deleteHotel(1);
        });
    }
}
