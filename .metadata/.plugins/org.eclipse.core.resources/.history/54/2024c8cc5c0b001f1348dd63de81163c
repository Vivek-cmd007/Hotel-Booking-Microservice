package com.bookingservice.bookingtest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import com.bookingservice.entity.BookingDetails;
import com.bookingservice.model.RoomDetails;
import com.bookingservice.model.User;
import com.bookingservice.repository.BookingDetailsRepository;
import com.bookingservice.service.BookingDetailsServiceImpl;
import com.bookingservice.service.HotelServiceConsumer;
import com.bookingservice.service.UserServiceConsumer;

@SpringBootTest
public class BookingTest {
//	@InjectMocks
//	private BookingDetailsServiceImpl bookingService;
//
//	@Mock
//	private BookingDetailsRepository bookingDao;
//
//	@Mock
//	private UserServiceConsumer userService;
//
//	@Mock
//	private HotelServiceConsumer hotelService;
//
//	@Test
//	public void testAddBooking() {

//		User user = new User(1, "Rohit", "1234567890@gmail", "6563133", "user", "84121211", "ghgvvnvn");
//		RoomDetails room = new RoomDetails(1, 1, "101","Delux", 1000.0, true);
//		BookingDetails booking = new BookingDetails(1, 1, 1, 1, LocalDate.now(), LocalDate.now().plusDays(2),
//				LocalDate.now().plusDays(5), 2, 1, 200.0, "Booked");
//
//		when(userService.getUserById(1)).thenReturn(user);
//		when(hotelService.getRoomById(1)).thenReturn(room);
//
//		// used to return the updated room
//		when(hotelService.updateRoom(any(Room.class))).thenAnswer(invocation -> invocation.getArgument(0));
//		when(bookingDao.save(any(Booking.class))).thenReturn(booking);
//
//		Booking savedBooking = bookingService.addBooking(booking);
//
//		assertEquals("Booked", savedBooking.getStatus());
//		assertFalse(room.isIsavailable());
//	}
//
//	@Test
//	void addBookingRoomNotAvailableTest() {
//		Booking booking = new Booking(1, 1, 1, 1, LocalDate.now(), LocalDate.now().plusDays(5),
//				LocalDate.now().plusDays(10), 2, 1, 200.0, "Booked");
//		Room room = new Room(1, "101", "Deluxe", 150.0, false, new Hotel());
//
//		when(hotelService.getRoomById(1)).thenReturn(room);
//
//		assertThrows(ResourceNotFoundException.class, () -> bookingService.addBooking(booking));
//	}
//
//	@Test
//	void getBookingDetailsByIdTest() {
//		Booking booking = new Booking(1, 1, 1, 1, LocalDate.now(), LocalDate.now().plusDays(5),
//				LocalDate.now().plusDays(10), 2, 1, 200.0, "Booked");
//		User user = new User(1, "rohit", "rt@gmail.com", "password", "user", "5555555", "gcgcc");
//		Hotel hotel = new Hotel();
//		hotel.setHotelId(1);
//
//		Room room = new Room(1, "101", "Deluxe", 150.0, true, new Hotel());
//
//		when(bookingDao.findById(1)).thenReturn(Optional.of(booking));
//		when(userService.getUserById(1)).thenReturn(user);
//		when(hotelService.getRoomById(1)).thenReturn(room);
//		when(hotelService.getHotelById(1)).thenReturn(hotel);
//
//		BookingResponse response = bookingService.getBookingDetailsById(1);
//
//		assertEquals("rohit", response.getCustomerName());
//		assertEquals("5555555", response.getMobile());
//		verify(userService).getUserById(1);
//		verify(hotelService).getRoomById(1);
//		verify(hotelService).getHotelById(1);
//	}
//
//	@Test
//	void cancelBookingDeadlinePassedTest() {
//		Booking booking = new Booking(1, 1, 1, 1, LocalDate.now(), LocalDate.now().minusDays(2),
//				LocalDate.now().plusDays(5), 2, 1, 200.0, "Booked");
//
//		when(bookingDao.findById(1)).thenReturn(Optional.of(booking));
//
//		assertThrows(DeadlinePassedException.class, () -> bookingService.cancelBooking(1));
//	}
//}

	@InjectMocks
	private BookingDetailsServiceImpl bookingService;
	@Mock
	private BookingDetailsRepository bookingRepository;
	@Test
	public void testAddBookingDetails() {
		
		BookingDetails booking=new BookingDetails();
		booking.setBookingId(10);
		booking.setRoomId(100);
		booking.setUserId(1);
		booking.setHotelId(111);
		booking.setNoOfAdults(2);
		booking.setNoOfChildren(1);
		booking.set
		booking.setAmount("4000");
		when(bookingRepository.save(booking)).thenReturn(booking);

		BookingDetails savedUser = bookingService.createBookingDetails(booking);
		verify(bookingRepository, times(1)).save(booking);

		assertNotNull(savedUser);
		assertEquals(booking.getUserId(),savedUser.getUserId());
		assertEquals(booking.getRoomId(),savedUser.getRoomId());
		assertEquals(booking.getHotelId(),savedUser.getHotelId());
		
	}
	@Test
	public void testDeleteBookingDetails() {
		
		BookingDetails booking=new BookingDetails();
		booking.setBookingId(10);
		booking.setHotelId(111);
		booking.setUserId(2);
		booking.setRoomId(101);

		booking.setNoOfAdults(2);
		booking.setNoOfChildren(0);
		booking.setAmount("2000");
		
		when(bookingRepository.findById(10)).thenReturn(Optional.of(booking));

		doNothing().when(bookingRepository).delete(booking);

		bookingService.deleteBookingDetails(10);

		
	}
	@Test
	public void tesgetBookingDetailById() {
		
		BookingDetails  booking =new BookingDetails();
		booking.setBookingId(11);
		booking.setUserId(2);
		booking.setHotelId(112);
		booking.setRoomId(102);
		
		booking.setNoOfAdults(3);
		booking.setNoOfChildren(2);
		booking.setAmount("6000");
		
		
	}
	@Test
	public void testGetAllBookingDetails() {
		BookingDetails booking=new BookingDetails();
		
		booking.setBookingId(13);
		booking.setHotelId(115);
		booking.setRoomId(103);
		booking.setUserId(3);
	
		booking.setNoOfAdults(2);
		booking.setNoOfChildren(0);
		booking.setAmount("2500");
		
		BookingDetails booking1=new BookingDetails();
		booking.setBookingId(14);
		booking.setHotelId(116);
		booking.setUserId(4);
		booking.setRoomId(104);
		
        booking.setNoOfAdults(1);
        booking.setNoOfChildren(0);
        booking.setAmount("1000");
        
        
        List<BookingDetails> bookingDetails = new ArrayList<>();
        bookingDetails.add(booking);
        bookingDetails.add(booking1);

		when(bookingRepository.findAll()).thenReturn(bookingDetails);

		List<BookingDetails> bookingList = bookingService.getAllBookingDetails();
		assertEquals(2, bookingList.size());

	}
	
	@Test
	public void testUpdateBookingDetails() {
		 BookingDetails booking = new BookingDetails();
	        booking.setBookingId(1);
	        booking.setRoomId(101);
	        booking.setUserId(1);
	        booking.setHotelId(1);
	     
	        booking.setNoOfAdults(2);
	        booking.setNoOfChildren(1);
	        booking.setAmount("3000");

	        Mockito.when(bookingRepository.save(Mockito.any(BookingDetails.class))).thenReturn(booking);

	        BookingDetails updatedBooking = bookingService.updateBookingDetails(booking);
	        // Verify and assert
	        Mockito.verify(bookingRepository, Mockito.times(1)).save(booking);
	        assertNotNull(updatedBooking);
	        assertEquals(booking, updatedBooking);
	    }
	
	

}
